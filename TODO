
TO DO
1 Parsing : to liste 
OK	- a Redirection type (< ou >>)
OK	- b nom du fichier de redirection
OK	- c commande + options + argument
	- e heredoc 
	- f envt ???


2 Check access of files and create fd's
	-> Why not do that during the parsing ???
	ft_checkdir in sem.c
3 Déterminer les priorités d'exécution des pipes
4 générer les pids : l'output de 1 devient input de 2 etc 
4.1 faire avec X childs
4.2 aller chercher les inputs dans les fichiers
5 Exécuter les commandes
5.1 poser les résultats dans les fichiers
6 Générer le résultat final
...


echo << bob | ....  | ...
heredoc > ... ... ..
heredoc > ... ... ...

bob -> remettre tout ce que on a dans arg de la commande echo (n° 1)
lance le pip mult





ECHO SPACE STRING qui se termine par : > >> | < << 
ECHO NO-SPACE = ERROR
Argument delimiteurs :  ??
signal : https://www.youtube.com/watch?v=83M5-NPDeWs





QUESTIONS :
1 shall we have permanant history?
2 single quote = erreur ? ou attend la fin de input ????
3 can we have >> file |   the output would be duplicated in the file and pipe
3.1 can we have | << ??? the input is the file or the output of the pipe ?
4 can we have 2 redirections at once : >> file >> file ... what does it mean ?
5 faut il codes pwd, exit, ...
...



FUNCTIONS :
readline : li la ligne du prompt

void rl_clear_history (void) [Function]
Clear the history list by deleting all of the entries, in the same manner as the History library’s clear_history() function. This differs from clear_history because it frees private data Readline saves in the history list.

int rl_on_new_line (void) [Function]
Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline

void rl_replace_line (const char *text, int clear undo) [Function]
Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible. If clear undo is non-zero, the undo list associated with the current line is cleared.

void rl_redisplay (void) [Function]
Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.

access() vérifie si le processus appelant peut accéder au fichier pathname. Si pathname est un lien symbolique, il est déréférencé.

wait()
Wait for the status of a terminated child process

wait3()
Wait for any child process to change its state

wait4()
Wait for one or more child process to change its state

waitpid()
Wait for a child process to stop or terminate

signal()
Set handling for exceptional conditions
The signal() function is used to specify an action to take place when certain conditions are detected while a program executes. See the <signal.h> header file for definitions of these conditions, and also refer to the System Architecture manual.

sigaction()
Examine or specify the action associated with a signalgetcwd()

getcwd()
Get the name of the current working directory

chdir()
Change the current working directory

stat() récupère l'état du fichier pointé par path et remplit le tampon buf.

lstat()  est  identique  à stat(), sauf que dans le cas où path est un lien symbolique, il donne l'état du lien lui-même plutôt que celui du fichier visé.

fstat() est identique à stat(), sauf que le  fichier  dont  l'état  est  donné  est  celui référencé par le descripteur de fichier fd.

unlink()
Remove a link to a file // Call the unlink() function to delete a file ???

execve()
Execute a file

dup()
Duplicate a file descriptor

dup2()
Duplicate a file descriptor, specifying the new descriptor

pipe()
Create a pipe

The opendir() function is used with readdir() and closedir() to get the lis
of file names contained in the directory specified by dirname.

isatty()
Test to see if a file descriptor is associated with a terminal

ttyname()
Get a fully qualified pathname for a file

ttyslot - Trouver l'emplacement du terminal en cours dans un fichier

La fonction ioctl() modifie le comportement des périphériques sous-jacents des fichiers spéciaux. En particulier, de nombreuses caractéristiques des fichiers spéciaux en mode caractère (par exemple des terminaux) peuvent être contrôlées avec des requêtes ioctl(). L'argument d doit être un descripteur de fichier ouvert.

getenv - Lire une variable d'environnement

tcsetattr - set the parameters associated with the terminal

tcgetattr - get the parameters associated with the terminal

The tgetent routine loads the entry for name. It returns 1 on success, 0 if there is no such entry, and -1 if the terminfo database could not be found. The emulation ignores the buffer pointer bp.

The tgetflag routine gets the boolean entry for id, or zero  if	it  is not available.

The tgetnum routine gets the numeric entry for id, or -1 if it	is not available.

The tgoto routine instantiates the parameters into the given capability. The output from this routine is to be passed to tputs.

The tputs routine is described on the curs_terminfo(3X) manual page. It can retrieve capabilities by either termcap or terminfo name.
